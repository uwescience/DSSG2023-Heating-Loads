width = 625,
height = 625,
margin = list(l = 0, r = 0, b = 0, t = 0, pad = 0)
)
return(borough_proj_plotly)
}
borough_projs_final
borough_projs_subset <-
borough_projs_final %>%
filter(
Rebate_dol == !!Rebate_dol &
Fuel_Esc_Rate == !!Fuel_Esc_Rate &
Temp_Projection == !!Temp_Projection
)
Rebate_dol = "current";
Fuel_Esc_Rate = "current";
Temp_Projection = "current"
borough_projs_subset <-
borough_projs_final %>%
filter(
Rebate_dol == !!Rebate_dol &
Fuel_Esc_Rate == !!Fuel_Esc_Rate &
Temp_Projection == !!Temp_Projection
)
borough_projs_subset
## Rasterize, then convert tile into polygon
borough_projs_raster <-
borough_projs_df %>%
mutate(name2 = as.integer(factor(name))) %>% # coerce name into integer-factor
mutate(row = -row) %>%
dplyr::select(col, row, name2) %>%           # select X, Y (for coords), Z (for value)
rasterFromXYZ()
## Merge adoption data w/ tilegram layout (from 'make_tilegram.R')
borough_projs_df <- merge(borough_projs_subset, all_grids, by = 'name')
## Rasterize, then convert tile into polygon
borough_projs_raster <-
borough_projs_df %>%
mutate(name2 = as.integer(factor(name))) %>% # coerce name into integer-factor
mutate(row = -row) %>%
dplyr::select(col, row, name2) %>%           # select X, Y (for coords), Z (for value)
rasterFromXYZ()
borough_projs_polygon <-
borough_projs_raster %>%
rasterToPolygons(dissolve = TRUE) %>%
st_as_sf()
borough_projs_subset
head(borough_projs_subset)
borough_projs_final$Heating_Days_Covered
runApp()
runApp()
runApp()
runApp()
borough_projs_final
borough_projs_final %>%
mutate(
Heating_Days_Covered = log(Heating_Days_Covered)
)
borough_projs_final %>%
mutate(
Heating_Days_Covered = log(Heating_Days_Covered*100)
)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
withMathJax("$$\text{Heating Days Covered = \frac{Days below 65 F but abvoe 5 F}{}$$")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
require(dplyr)
require(forcats)
## Load borough-level estimates
borough_projs <- read.csv("data/borough_estimates_weightedByHuFuel.csv")
## Generate a toy dataframe (simple average within boroughs); replace with real one later
borough_projs_final <-
borough_projs %>%
rename(name = census_area,
NPV = NPV_weighted2,
CO2_lbs_saved = CO2_lbs_saved_weighted2) %>%
mutate(
name = case_when(name == "Wade Hampton Census Area" ~ "Kusilvak Census Area",
name == "Anchorage municipality" ~ "Anchorage Municipality",
TRUE ~ name),
Rebate_dol = case_when(Rebate_dol == 0 ~ "current",
Rebate_dol == 2000 ~ "mid",
Rebate_dol == 4000 ~ "high"),
Fuel_Esc_Rate = case_when(Fuel_Esc_Rate == 0.03 ~ "current",
Fuel_Esc_Rate == 0.06 ~ "mid",
Fuel_Esc_Rate == 0.09 ~ "high"),
Temp_Projection = case_when(Temp_Projection == 0 ~ "current",
Temp_Projection == 1.5 ~ "mid",
Temp_Projection == 3 ~ "high")
)
Rebate_dol = "current";
Fuel_Esc_Rate = "current";
Temp_Projection = "current"
## Subset data based on combination of 3x3x3 projections
borough_projs_subset <-
borough_projs_final %>%
filter(
Rebate_dol == !!Rebate_dol &
Fuel_Esc_Rate == !!Fuel_Esc_Rate &
Temp_Projection == !!Temp_Projection
) %>%
mutate(name = str_trim(str_remove(name, "Borough|City and Borough|Census Area|Municipality")))
borough_projs_subset
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_head(n = 5)
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_head(n = 5)
outcome == "Heating_Days_Covered"
outcome = "Heating_Days_Covered"
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_head(n = 5)
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_tail(n = 5)
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
slice_tail(n = 5)
runApp()
vis_borough_barplot(outcome = "Heating_Days_Covered")
borough_projs_top
borough_projs_top <- bind_rows(borough_projs_head, borough_projs_tail)
borough_projs_head <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_head(n = 5)
borough_projs_tail <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_tail(n = 5)
borough_projs_top <- bind_rows(borough_projs_head, borough_projs_tail)
borough_projs_top
borough_projs_subset %>%
slice_max(order_by = !!sym(outcome), n = 5)
borough_projs_subset %>%
slice_min(order_by = !!sym(outcome), n = 5)
# Write another function to subset data based on scenarios and create bar plots/tables
vis_borough_barplot <- function(outcome = "NPV",
Rebate_dol = "current",
Fuel_Esc_Rate = "current",
Temp_Projection = "current") {
## Subset data based on combination of 3x3x3 projections
borough_projs_subset <-
borough_projs_final %>%
filter(
Rebate_dol == !!Rebate_dol &
Fuel_Esc_Rate == !!Fuel_Esc_Rate &
Temp_Projection == !!Temp_Projection
) %>%
mutate(name = str_trim(str_remove(name, "Borough|City and Borough|Census Area|Municipality")))
## Rank boroughs by outcome
if (outcome == "Heating_Days_Covered") {
borough_projs_head <-
borough_projs_subset %>%
slice_max(order_by = !!sym(outcome), n = 5)
borough_projs_tail <-
borough_projs_subset %>%
slice_min(order_by = !!sym(outcome), n = 5)
borough_projs_top <-
bind_rows(borough_projs_head, borough_projs_tail) %>%
mutate(name = fct_reorder(name, !!sym(outcome)))
} else {
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_head(n = 10)
}
## Plotly bar plot
plot_ly(
data = borough_projs_top,
x = as.formula(paste0("~", outcome)),
y = ~ name
) %>%
layout(
yaxis = list(title = ""),
height = 205,
plot_bgcolor = '#D8DEE9',
paper_bgcolor = '#D8DEE9',
margin = list(l = 0, r = 0, b = 0, t = 0, pad = 0)
)
}
vis_borough_barplot(outcome = "Heating_Days_Covered")
# Write another function to subset data based on scenarios and create bar plots/tables
vis_borough_barplot <- function(outcome = "NPV",
Rebate_dol = "current",
Fuel_Esc_Rate = "current",
Temp_Projection = "current") {
## Subset data based on combination of 3x3x3 projections
borough_projs_subset <-
borough_projs_final %>%
filter(
Rebate_dol == !!Rebate_dol &
Fuel_Esc_Rate == !!Fuel_Esc_Rate &
Temp_Projection == !!Temp_Projection
) %>%
mutate(name = str_trim(str_remove(name, "Borough|City and Borough|Census Area|Municipality")))
## Rank boroughs by outcome
if (outcome == "Heating_Days_Covered") {
borough_projs_head <-
borough_projs_subset %>%
slice_max(order_by = !!sym(outcome), n = 5)
borough_projs_tail <-
borough_projs_subset %>%
slice_min(order_by = !!sym(outcome), n = 5)
borough_projs_top <-
bind_rows(borough_projs_head, borough_projs_tail) %>%
mutate(name = fct_reorder(name, !!sym(outcome)))
} else {
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_head(n = 10)
}
## Plotly bar plot
plot_ly(
data = borough_projs_top,
x = as.formula(paste0("~", outcome)),
y = ~ name
) %>%
layout(
xaxis = if (outcome == "Heating_Days_Covered") list(range = c(0.5, 1)),
yaxis = list(title = ""),
height = 205,
plot_bgcolor = '#D8DEE9',
paper_bgcolor = '#D8DEE9',
margin = list(l = 0, r = 0, b = 0, t = 0, pad = 0)
)
}
vis_borough_barplot(outcome = "Heating_Days_Covered")
borough_projs_top <-
bind_rows(#borough_projs_head,
borough_projs_tail) %>%
mutate(name = fct_reorder(name, !!sym(outcome)))
# Write another function to subset data based on scenarios and create bar plots/tables
vis_borough_barplot <- function(outcome = "NPV",
Rebate_dol = "current",
Fuel_Esc_Rate = "current",
Temp_Projection = "current") {
## Subset data based on combination of 3x3x3 projections
borough_projs_subset <-
borough_projs_final %>%
filter(
Rebate_dol == !!Rebate_dol &
Fuel_Esc_Rate == !!Fuel_Esc_Rate &
Temp_Projection == !!Temp_Projection
) %>%
mutate(name = str_trim(str_remove(name, "Borough|City and Borough|Census Area|Municipality")))
## Rank boroughs by outcome
if (outcome == "Heating_Days_Covered") {
# borough_projs_head <-
#   borough_projs_subset %>%
#   slice_max(order_by = !!sym(outcome), n = 5)
borough_projs_tail <-
borough_projs_subset %>%
slice_min(order_by = !!sym(outcome), n = 10)
borough_projs_top <-
bind_rows(#borough_projs_head,
borough_projs_tail) %>%
mutate(name = fct_reorder(name, !!sym(outcome)))
} else {
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_head(n = 10)
}
## Plotly bar plot
plot_ly(
data = borough_projs_top,
x = as.formula(paste0("~", outcome)),
y = ~ name
) %>%
layout(
xaxis = if (outcome == "Heating_Days_Covered") list(range = c(0.5, 1)),
yaxis = list(title = ""),
height = 205,
plot_bgcolor = '#D8DEE9',
paper_bgcolor = '#D8DEE9',
margin = list(l = 0, r = 0, b = 0, t = 0, pad = 0)
)
}
vis_borough_barplot(outcome = "Heating_Days_Covered")
runApp()
# Write another function to subset data based on scenarios and create bar plots/tables
vis_borough_barplot <- function(outcome = "NPV",
Rebate_dol = "current",
Fuel_Esc_Rate = "current",
Temp_Projection = "current") {
## Subset data based on combination of 3x3x3 projections
borough_projs_subset <-
borough_projs_final %>%
filter(
Rebate_dol == !!Rebate_dol &
Fuel_Esc_Rate == !!Fuel_Esc_Rate &
Temp_Projection == !!Temp_Projection
) %>%
mutate(name = str_trim(str_remove(name, "Borough|City and Borough|Census Area|Municipality")))
## Rank boroughs by outcome
if (outcome == "Heating_Days_Covered") {
## for Heating_Days_Covered, get bottom 10 boroughs
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_tail(n = 10)
} else {
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_head(n = 10)
}
## Plotly bar plot
plot_ly(
data = borough_projs_top,
x = as.formula(paste0("~", outcome)),
y = ~ name
) %>%
layout(
xaxis = if (outcome == "Heating_Days_Covered") list(range = c(0.6, 1), text = "% of Heating Days Covered"),
yaxis = list(title = ""),
height = 205,
plot_bgcolor = '#D8DEE9',
paper_bgcolor = '#D8DEE9',
margin = list(l = 0, r = 0, b = 0, t = 0, pad = 0)
)
}
vis_borough_barplot(outcome = "Heating_Days_Covered")
# Write another function to subset data based on scenarios and create bar plots/tables
vis_borough_barplot <- function(outcome = "NPV",
Rebate_dol = "current",
Fuel_Esc_Rate = "current",
Temp_Projection = "current") {
## Subset data based on combination of 3x3x3 projections
borough_projs_subset <-
borough_projs_final %>%
filter(
Rebate_dol == !!Rebate_dol &
Fuel_Esc_Rate == !!Fuel_Esc_Rate &
Temp_Projection == !!Temp_Projection
) %>%
mutate(name = str_trim(str_remove(name, "Borough|City and Borough|Census Area|Municipality")))
## Rank boroughs by outcome
if (outcome == "Heating_Days_Covered") {
## for Heating_Days_Covered, get bottom 10 boroughs
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_tail(n = 10)
} else {
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_head(n = 10)
}
## Plotly bar plot
plot_ly(
data = borough_projs_top,
x = as.formula(paste0("~", outcome)),
y = ~ name
) %>%
layout(
xaxis = if (outcome == "Heating_Days_Covered") list(range = c(0.6, 1), title = "% of Heating Days Covered"),
yaxis = list(title = ""),
height = 205,
plot_bgcolor = '#D8DEE9',
paper_bgcolor = '#D8DEE9',
margin = list(l = 0, r = 0, b = 0, t = 0, pad = 0)
)
}
vis_borough_barplot(outcome = "Heating_Days_Covered")
runApp()
# Write another function to subset data based on scenarios and create bar plots/tables
vis_borough_barplot <- function(outcome = "NPV",
Rebate_dol = "current",
Fuel_Esc_Rate = "current",
Temp_Projection = "current") {
## Subset data based on combination of 3x3x3 projections
borough_projs_subset <-
borough_projs_final %>%
filter(
Rebate_dol == !!Rebate_dol &
Fuel_Esc_Rate == !!Fuel_Esc_Rate &
Temp_Projection == !!Temp_Projection
) %>%
mutate(name = str_trim(str_remove(name, "Borough|City and Borough|Census Area|Municipality")))
## Rank boroughs by outcome
if (outcome == "Heating_Days_Covered") {
## for Heating_Days_Covered, get bottom 10 boroughs
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_tail(n = 10)
} else {
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_head(n = 10)
}
## Plotly bar plot
plot_ly(
data = borough_projs_top,
x = as.formula(paste0("~", outcome)),
y = ~ name
) %>%
layout(
xaxis = if (outcome == "Heating_Days_Covered") list(range = c(0.6, 1), title = "% of Heating Days Covered"),
yaxis = list(title = ""),
height = 205,
plot_bgcolor = '#D8DEE9',
paper_bgcolor = '#D8DEE9',
margin = list(l = 0, r = 0, b = 0, t = 0, pad = 0)
)
}
vis_borough_barplot(outcome = "Heating_Days_Covered")
runApp()
# Write another function to subset data based on scenarios and create bar plots/tables
vis_borough_barplot <- function(outcome = "NPV",
Rebate_dol = "current",
Fuel_Esc_Rate = "current",
Temp_Projection = "current") {
## Subset data based on combination of 3x3x3 projections
borough_projs_subset <-
borough_projs_final %>%
filter(
Rebate_dol == !!Rebate_dol &
Fuel_Esc_Rate == !!Fuel_Esc_Rate &
Temp_Projection == !!Temp_Projection
) %>%
mutate(name = str_trim(str_remove(name, "Borough|City and Borough|Census Area|Municipality")))
## Rank boroughs by outcome
if (outcome == "Heating_Days_Covered") {
## for Heating_Days_Covered, get bottom 10 boroughs
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_tail(n = 10)
} else if (outcome == "NPV") {
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_head(n = 10)
} else if (outcome == "CO2_lbs_saved") {
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name))
}
## Plotly bar plot
borough_proj_barplot <-
plot_ly(
data = borough_projs_top,
x = as.formula(paste0("~", outcome)),
y = ~ name
) %>%
layout(
xaxis = if (outcome == "Heating_Days_Covered") list(range = c(0.6, 1), title = "% of Heating Days Covered"),
yaxis = list(title = ""),
height = if (outcome == "CO2_lbs_saved") 510 else 205,
plot_bgcolor = '#D8DEE9',
paper_bgcolor = '#D8DEE9',
margin = list(l = 0, r = 0, b = 0, t = 0, pad = 0)
)
return(borough_proj_barplot)
}
vis_borough_barplot(outcome = "CO2_lbs_saved")
runApp()
runApp()
runApp()
borough_projs_final
head(borough_projs_final)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
