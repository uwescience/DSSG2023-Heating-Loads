layout(
xaxis = if (outcome == "Heating_Days_Covered") list(range = c(0.6, 1), text = "% of Heating Days Covered"),
yaxis = list(title = ""),
height = 205,
plot_bgcolor = '#D8DEE9',
paper_bgcolor = '#D8DEE9',
margin = list(l = 0, r = 0, b = 0, t = 0, pad = 0)
)
}
vis_borough_barplot(outcome = "Heating_Days_Covered")
# Write another function to subset data based on scenarios and create bar plots/tables
vis_borough_barplot <- function(outcome = "NPV",
Rebate_dol = "current",
Fuel_Esc_Rate = "current",
Temp_Projection = "current") {
## Subset data based on combination of 3x3x3 projections
borough_projs_subset <-
borough_projs_final %>%
filter(
Rebate_dol == !!Rebate_dol &
Fuel_Esc_Rate == !!Fuel_Esc_Rate &
Temp_Projection == !!Temp_Projection
) %>%
mutate(name = str_trim(str_remove(name, "Borough|City and Borough|Census Area|Municipality")))
## Rank boroughs by outcome
if (outcome == "Heating_Days_Covered") {
## for Heating_Days_Covered, get bottom 10 boroughs
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_tail(n = 10)
} else {
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_head(n = 10)
}
## Plotly bar plot
plot_ly(
data = borough_projs_top,
x = as.formula(paste0("~", outcome)),
y = ~ name
) %>%
layout(
xaxis = if (outcome == "Heating_Days_Covered") list(range = c(0.6, 1), title = "% of Heating Days Covered"),
yaxis = list(title = ""),
height = 205,
plot_bgcolor = '#D8DEE9',
paper_bgcolor = '#D8DEE9',
margin = list(l = 0, r = 0, b = 0, t = 0, pad = 0)
)
}
vis_borough_barplot(outcome = "Heating_Days_Covered")
runApp()
# Write another function to subset data based on scenarios and create bar plots/tables
vis_borough_barplot <- function(outcome = "NPV",
Rebate_dol = "current",
Fuel_Esc_Rate = "current",
Temp_Projection = "current") {
## Subset data based on combination of 3x3x3 projections
borough_projs_subset <-
borough_projs_final %>%
filter(
Rebate_dol == !!Rebate_dol &
Fuel_Esc_Rate == !!Fuel_Esc_Rate &
Temp_Projection == !!Temp_Projection
) %>%
mutate(name = str_trim(str_remove(name, "Borough|City and Borough|Census Area|Municipality")))
## Rank boroughs by outcome
if (outcome == "Heating_Days_Covered") {
## for Heating_Days_Covered, get bottom 10 boroughs
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_tail(n = 10)
} else {
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_head(n = 10)
}
## Plotly bar plot
plot_ly(
data = borough_projs_top,
x = as.formula(paste0("~", outcome)),
y = ~ name
) %>%
layout(
xaxis = if (outcome == "Heating_Days_Covered") list(range = c(0.6, 1), title = "% of Heating Days Covered"),
yaxis = list(title = ""),
height = 205,
plot_bgcolor = '#D8DEE9',
paper_bgcolor = '#D8DEE9',
margin = list(l = 0, r = 0, b = 0, t = 0, pad = 0)
)
}
vis_borough_barplot(outcome = "Heating_Days_Covered")
runApp()
# Write another function to subset data based on scenarios and create bar plots/tables
vis_borough_barplot <- function(outcome = "NPV",
Rebate_dol = "current",
Fuel_Esc_Rate = "current",
Temp_Projection = "current") {
## Subset data based on combination of 3x3x3 projections
borough_projs_subset <-
borough_projs_final %>%
filter(
Rebate_dol == !!Rebate_dol &
Fuel_Esc_Rate == !!Fuel_Esc_Rate &
Temp_Projection == !!Temp_Projection
) %>%
mutate(name = str_trim(str_remove(name, "Borough|City and Borough|Census Area|Municipality")))
## Rank boroughs by outcome
if (outcome == "Heating_Days_Covered") {
## for Heating_Days_Covered, get bottom 10 boroughs
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_tail(n = 10)
} else if (outcome == "NPV") {
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_head(n = 10)
} else if (outcome == "CO2_lbs_saved") {
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name))
}
## Plotly bar plot
borough_proj_barplot <-
plot_ly(
data = borough_projs_top,
x = as.formula(paste0("~", outcome)),
y = ~ name
) %>%
layout(
xaxis = if (outcome == "Heating_Days_Covered") list(range = c(0.6, 1), title = "% of Heating Days Covered"),
yaxis = list(title = ""),
height = if (outcome == "CO2_lbs_saved") 510 else 205,
plot_bgcolor = '#D8DEE9',
paper_bgcolor = '#D8DEE9',
margin = list(l = 0, r = 0, b = 0, t = 0, pad = 0)
)
return(borough_proj_barplot)
}
vis_borough_barplot(outcome = "CO2_lbs_saved")
runApp()
runApp()
runApp()
borough_projs_final
head(borough_projs_final)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
borough_projs_top
runApp()
runApp()
runApp()
# Write another function to subset data based on scenarios and create bar plots/tables
vis_borough_barplot <- function(outcome = "NPV",
Rebate_dol = "current",
Fuel_Esc_Rate = "current",
Temp_Projection = "current") {
## Subset data based on combination of 3x3x3 projections
borough_projs_subset <-
borough_projs_final %>%
filter(Rebate_dol == !!Rebate_dol &
Fuel_Esc_Rate == !!Fuel_Esc_Rate &
Temp_Projection == !!Temp_Projection) %>%
mutate(name = str_trim(str_remove(name, "Borough|City and Borough|Census Area|Municipality")))
## customize data and input
customize_input <- list()
## Rank boroughs by outcome
if (outcome == "Heating_Days_Covered") {
## for Heating_Days_Covered, get bottom 10 boroughs
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_tail(n = 10)
customize_input$xaxis <- list(range = c(0.55, 0.95), title = "% of Heating Days Covered")
customize_input$height <- 205
} else if (outcome == "NPV") {
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_head(n = 10)
customize_input$height <- 205
} else if (outcome %in% c("CO2_lbs_saved", "CO2_driving_miles_saved")) {
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name))
customize_input$xaxis <- list(title = str_remove(outcome, "_"))
customize_input$height <- 450
}
## Plotly bar plot
borough_proj_barplot <-
plot_ly(
data = borough_projs_top,
x = as.formula(paste0("~", outcome)),
y = ~ name
) %>%
layout(
xaxis = customize_input$xaxis,
yaxis = list(title = ""),
height = customize_input$height,
plot_bgcolor = '#D8DEE9',
paper_bgcolor = '#D8DEE9',
margin = list(l = 0, r = 0, b = 0, t = 0, pad = 0)
)
return(borough_proj_barplot)
}
vis_borough_barplot(outcome = "CO2_lbs_saved")
# Write another function to subset data based on scenarios and create bar plots/tables
vis_borough_barplot <- function(outcome = "NPV",
Rebate_dol = "current",
Fuel_Esc_Rate = "current",
Temp_Projection = "current") {
## Subset data based on combination of 3x3x3 projections
borough_projs_subset <-
borough_projs_final %>%
filter(Rebate_dol == !!Rebate_dol &
Fuel_Esc_Rate == !!Fuel_Esc_Rate &
Temp_Projection == !!Temp_Projection) %>%
mutate(name = str_trim(str_remove(name, "Borough|City and Borough|Census Area|Municipality")))
## customize data and input
customize_input <- list()
## Rank boroughs by outcome
if (outcome == "Heating_Days_Covered") {
## for Heating_Days_Covered, get bottom 10 boroughs
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_tail(n = 10)
customize_input$xaxis <- list(range = c(0.55, 0.95), title = "% of Heating Days Covered")
customize_input$height <- 205
} else if (outcome == "NPV") {
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_head(n = 10)
customize_input$height <- 205
} else if (outcome %in% c("CO2_lbs_saved", "CO2_driving_miles_saved")) {
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name))
customize_input$xaxis <- list(title = str_remove(!!sym(outcome), "_"))
customize_input$height <- 450
}
## Plotly bar plot
borough_proj_barplot <-
plot_ly(
data = borough_projs_top,
x = as.formula(paste0("~", outcome)),
y = ~ name
) %>%
layout(
xaxis = customize_input$xaxis,
yaxis = list(title = ""),
height = customize_input$height,
plot_bgcolor = '#D8DEE9',
paper_bgcolor = '#D8DEE9',
margin = list(l = 0, r = 0, b = 0, t = 0, pad = 0)
)
return(borough_proj_barplot)
}
vis_borough_barplot(outcome = "CO2_lbs_saved")
# Write another function to subset data based on scenarios and create bar plots/tables
vis_borough_barplot <- function(outcome = "NPV",
Rebate_dol = "current",
Fuel_Esc_Rate = "current",
Temp_Projection = "current") {
## Subset data based on combination of 3x3x3 projections
borough_projs_subset <-
borough_projs_final %>%
filter(Rebate_dol == !!Rebate_dol &
Fuel_Esc_Rate == !!Fuel_Esc_Rate &
Temp_Projection == !!Temp_Projection) %>%
mutate(name = str_trim(str_remove(name, "Borough|City and Borough|Census Area|Municipality")))
## customize data and input
customize_input <- list()
## Rank boroughs by outcome
if (outcome == "Heating_Days_Covered") {
## for Heating_Days_Covered, get bottom 10 boroughs
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_tail(n = 10)
customize_input$xaxis <- list(range = c(0.55, 0.95), title = "% of Heating Days Covered")
customize_input$height <- 205
} else if (outcome == "NPV") {
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name)) %>%
slice_head(n = 10)
customize_input$height <- 205
} else if (outcome %in% c("CO2_lbs_saved", "CO2_driving_miles_saved")) {
borough_projs_top <-
borough_projs_subset %>%
mutate(name = fct_reorder(name, !!sym(outcome))) %>%
arrange(desc(name))
customize_input$xaxis <- list(title = ifelse(outcome == "CO2_lbs_saved", "lbs saved", "driving miles saved"))
customize_input$height <- 450
}
## Plotly bar plot
borough_proj_barplot <-
plot_ly(
data = borough_projs_top,
x = as.formula(paste0("~", outcome)),
y = ~ name
) %>%
layout(
xaxis = customize_input$xaxis,
yaxis = list(title = ""),
height = customize_input$height,
plot_bgcolor = '#D8DEE9',
paper_bgcolor = '#D8DEE9',
margin = list(l = 0, r = 0, b = 0, t = 0, pad = 0)
)
return(borough_proj_barplot)
}
vis_borough_barplot(outcome = "CO2_lbs_saved")
vis_borough_barplot(outcome = "CO2_driving_miles_saved")
runApp()
runApp()
borough_projs <- read.csv("data/borough_estimates_weightedByHuFuel.csv")
borough_projs
borough_projs
require(dplyr)
borough_projs <- as_tibble(borough_projs)
borough_projs
borough_projs %>%
filter(Rebate_dol %in% c(0, 2000))
borough_projs %>%
filter(Rebate_dol %in% c(0, 2000)) %>%
select(census_area, Rebate_dol, NPV_weighted2)
borough_projs %>%
filter(Rebate_dol %in% c(0, 2000) & Fuel_Esc_Rate == 0.03 & Temp_Projection == 0) %>%
select(census_area, Rebate_dol, NPV_weighted2) %>%
borough_projs %>%
filter(Rebate_dol %in% c(0, 2000) & Fuel_Esc_Rate == 0.03 & Temp_Projection == 0) %>%
select(census_area, Rebate_dol, NPV_weighted2)
borough_projs %>%
filter(Rebate_dol %in% c(0, 2000) & Fuel_Esc_Rate == 0.03 & Temp_Projection == 0) %>%
select(census_area, Rebate_dol, NPV_weighted2)
borough_projs %>%
filter(Rebate_dol %in% c(0, 2000) & Fuel_Esc_Rate == 0.03 & Temp_Projection == 0) %>%
select(census_area, Rebate_dol, NPV_weighted2) %>%
pivot_wider(names_from = Rebate_dol, values_from = NPV_weighted2)
borough_projs %>%
filter(Rebate_dol %in% c(0, 2000) & Fuel_Esc_Rate == 0.03 & Temp_Projection == 0) %>%
select(census_area, Rebate_dol, NPV_weighted2) %>%
pivot_wider(names_from = Rebate_dol, values_from = NPV_weighted2) %>%
mutate(
diff = `2000` - `0`
)
borough_projs %>%
filter(Rebate_dol %in% c(0, 2000) & Fuel_Esc_Rate == 0.03 & Temp_Projection == 0) %>%
select(census_area, Rebate_dol, NPV_weighted2) %>%
pivot_wider(names_from = Rebate_dol, values_from = NPV_weighted2) %>%
mutate(
diff = `2000` - `0`
) %>%
View()
borough_projs %>%
filter(Rebate_dol %in% c(0, 2000) & Fuel_Esc_Rate == 0.03 & Temp_Projection == 0) %>%
select(census_area, Rebate_dol, NPV_weighted2) %>%
pivot_wider(names_from = Rebate_dol, values_from = NPV_weighted2) %>%
mutate(
diff = `2000` - `0`
) %>%
filter(
`0` < 0 & `2000` > 0
)
borough_projs %>%
filter(Rebate_dol %in% c(0, 2000) & Fuel_Esc_Rate == 0.03 & Temp_Projection == 0) %>%
select(census_area, Rebate_dol, NPV_weighted2) %>%
pivot_wider(names_from = Rebate_dol, values_from = NPV_weighted2) %>%
mutate(
diff = `2000` - `0`
) %>%
filter(
`0` < 0 & `2000` > 0
)
borough_projs %>%
filter(Rebate_dol %in% c(0, 2000) & Fuel_Esc_Rate == 0.03 & Temp_Projection == 0) %>%
select(census_area, Rebate_dol, NPV_weighted2) %>%
pivot_wider(names_from = Rebate_dol, values_from = NPV_weighted2) %>%
mutate(
diff = `2000` - `0`
)
borough_projs %>%
filter(Rebate_dol %in% c(0, 2000) & Fuel_Esc_Rate == 0.03 & Temp_Projection == 0) %>%
select(census_area, Rebate_dol, NPV_weighted2) %>%
pivot_wider(names_from = Rebate_dol, values_from = NPV_weighted2) %>%
mutate(
diff = `2000` - `0`
) %>%
filter(
`0` < -2000 & `2000` > -2000
)
borough_projs %>%
filter(Rebate_dol %in% c(0, 2000) & Fuel_Esc_Rate == 0.03 & Temp_Projection == 0) %>%
select(census_area, Rebate_dol, NPV_weighted2) %>%
pivot_wider(names_from = Rebate_dol, values_from = NPV_weighted2) %>%
mutate(
diff = `2000` - `0`
) %>%
filter(
`0` < -2000 & `2000` > -2000 | `0` < 0 & `2000` > 0
)
borough_projs
## heating days
borough_projs %>%
filter(Rebate_dol == 0 & Fuel_Esc_Rate == 0.03 & Temp_Projection == 0)
## heating days
borough_projs %>%
filter(Rebate_dol == 0 & Fuel_Esc_Rate == 0.03 & Temp_Projection == 0) %>%
select(borough_projs, Heating_Days_Covered)
## heating days
borough_projs %>%
filter(Rebate_dol == 0 & Fuel_Esc_Rate == 0.03 & Temp_Projection == 0) %>%
dplyr::select(borough_projs, Heating_Days_Covered)
## heating days
borough_projs %>%
filter(Rebate_dol == 0 & Fuel_Esc_Rate == 0.03 & Temp_Projection == 0) %>%
select(census_area, Heating_Days_Covered)
## heating days
borough_projs %>%
filter(Rebate_dol == 0 & Fuel_Esc_Rate == 0.03 & Temp_Projection == 0) %>%
select(census_area, Heating_Days_Covered) %>%
hist()
## heating days
borough_projs %>%
filter(Rebate_dol == 0 & Fuel_Esc_Rate == 0.03 & Temp_Projection == 0) %>%
select(census_area, Heating_Days_Covered) %>%
ggplot(aes(x = Heating_Days_Covered)) +
geom_histogram()
## heating days
borough_projs %>%
filter(Rebate_dol == 0 & Fuel_Esc_Rate == 0.03 & Temp_Projection == 0) %>%
select(census_area, Heating_Days_Covered) %>%
View()
## heating days
borough_projs %>%
filter(Rebate_dol == 0 & Fuel_Esc_Rate == 0.03 & Temp_Projection == 0) %>%
select(census_area, Heating_Days_Covered) %>%
mutate(
over97 = Heating_Days_Covered >= 0.97
)
## heating days
borough_projs %>%
filter(Rebate_dol == 0 & Fuel_Esc_Rate == 0.03 & Temp_Projection == 0) %>%
select(census_area, Heating_Days_Covered) %>%
mutate(
over97 = Heating_Days_Covered >= 0.97
) %>%
summarize(sum(over97))
borough_projs %>%
filter(Rebate_dol == 0 & Fuel_Esc_Rate == 0.03 & Temp_Projection == 0) %>%
select(census_area, Heating_Days_Covered) %>%
mutate(
over97 = Heating_Days_Covered >= 0.97
)
borough_projs %>%
filter(Rebate_dol == 0 & Fuel_Esc_Rate == 0.03 & Temp_Projection == 0) %>%
select(census_area, Heating_Days_Covered) %>%
mutate(
over97 = Heating_Days_Covered >= 0.97
) %>%
summarize(sum(over97))
borough_projs %>%
filter(Rebate_dol == 0 & Fuel_Esc_Rate == 0.03 & Temp_Projection == 0) %>%
select(census_area, Heating_Days_Covered) %>%
mutate(
over97 = Heating_Days_Covered >= 0.97
)
View(borough_projs %>%
filter(Rebate_dol == 0 & Fuel_Esc_Rate == 0.03 & Temp_Projection == 0) %>%
select(census_area, Heating_Days_Covered) %>%
mutate(
over97 = Heating_Days_Covered >= 0.97
) )
